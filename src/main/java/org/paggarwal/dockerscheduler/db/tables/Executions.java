/**
 * This class is generated by jOOQ
 */
package org.paggarwal.dockerscheduler.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.paggarwal.dockerscheduler.db.Dockerscheduler;
import org.paggarwal.dockerscheduler.db.Keys;
import org.paggarwal.dockerscheduler.db.tables.records.ExecutionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Executions extends TableImpl<ExecutionsRecord> {

	private static final long serialVersionUID = -797602716;

	/**
	 * The reference instance of <code>dockerscheduler.EXECUTIONS</code>
	 */
	public static final Executions EXECUTIONS = new Executions();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ExecutionsRecord> getRecordType() {
		return ExecutionsRecord.class;
	}

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.id</code>.
	 */
	public final TableField<ExecutionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.task_id</code>.
	 */
	public final TableField<ExecutionsRecord, Integer> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.stdout</code>.
	 */
	public final TableField<ExecutionsRecord, byte[]> STDOUT = createField("stdout", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.stderr</code>.
	 */
	public final TableField<ExecutionsRecord, byte[]> STDERR = createField("stderr", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.environment_variables</code>.
	 */
	public final TableField<ExecutionsRecord, String> ENVIRONMENT_VARIABLES = createField("environment_variables", org.jooq.impl.SQLDataType.VARCHAR.length(1024).nullable(false), this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.status</code>.
	 */
	public final TableField<ExecutionsRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.started_on</code>.
	 */
	public final TableField<ExecutionsRecord, Timestamp> STARTED_ON = createField("started_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.ended_on</code>.
	 */
	public final TableField<ExecutionsRecord, Timestamp> ENDED_ON = createField("ended_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>dockerscheduler.EXECUTIONS.payload</code>.
	 */
	public final TableField<ExecutionsRecord, byte[]> PAYLOAD = createField("payload", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * Create a <code>dockerscheduler.EXECUTIONS</code> table reference
	 */
	public Executions() {
		this("EXECUTIONS", null);
	}

	/**
	 * Create an aliased <code>dockerscheduler.EXECUTIONS</code> table reference
	 */
	public Executions(String alias) {
		this(alias, EXECUTIONS);
	}

	private Executions(String alias, Table<ExecutionsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Executions(String alias, Table<ExecutionsRecord> aliased, Field<?>[] parameters) {
		super(alias, Dockerscheduler.DOCKERSCHEDULER, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ExecutionsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EXECUTIONS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ExecutionsRecord> getPrimaryKey() {
		return Keys.KEY_EXECUTIONS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ExecutionsRecord>> getKeys() {
		return Arrays.<UniqueKey<ExecutionsRecord>>asList(Keys.KEY_EXECUTIONS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ExecutionsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ExecutionsRecord, ?>>asList(Keys.FK_TASKS_EXECUTIONS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Executions as(String alias) {
		return new Executions(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Executions rename(String name) {
		return new Executions(name, null);
	}
}
